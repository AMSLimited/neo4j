= Neo4j.rb

Neo4j is a network database framework for JRuby.
It uses the neo4j java library (http://www.neo4j.org/) and lucene for indexing and searching.


== Examples

Here are some examples of how to use the API.


=== Transactions

All operations that work with the node space (even read operations) must be wrapped in a transaction.
Example:

  include 'neo4j'

  Neo4j::Transaction.run {
    node = MyNode.new
  }

Example of how to do rollback

   Neo4j::Transaction.run { |t|
     # something failed
     t.failure # will cause a rollback
   }


You can also run it without a block, like this:

   transaction = Neo4j::Transaction.new
   transaction.start
   # do something
   transaction.finish

=== Neo::Node
A Neo::Node is a wrapper around the java org.neo4j.api.core.Node interface.
A node can have properties and relationships to other nodes.

Use the Neo4j::Node mixin

  class MyNode 
     include Neo4j::Node
   end

=== Create a Node

If a block is provided then the creation of the instance will be performed in an
transaction.

  node = MyNode.new { }

=== Node Properties

You can set any properties without declaring them first, see example below.
Those properties will be stored on in the Neo database.

  # create a node with to properties 
  node = MyNode.new { |n|
     n.foo = "123"
     n.bar = "432"
  }
 
  # access those properties
  puts node.foo
  
If you want you can also declare those properties, like the attr_accessor

  class SomeNode
     include Neo4j::Node
     properties :foo, :bar
  end

And to set a property

    f = SomeNode.new
    f.foo = "123"

Those declared properties will also be indexed, see below: Quering.


=== Relationships

Relationships has to be declared first like this:

  class Foo 
     include Neo::Node
     relations :bars
  end

Add a relation to a node:

  f = Foo.new { |n|
    n.bars < a_bar_node
  }


Traversing relationships:

  f.bars.each { |n| puts n }

Note that the bars method returns an object that mixins the Enumeration module.

=== Quering (using lucene)

All declared properties are automatically indexed by lucene.

Example

      class TestNode 
        include Neo4j::Node
        properties :name, :age
      end
    
      node = TestNode.new
      node.name = 'foo'
      node.age  = 42


      TestNode.find(:name => 'foo', :age => 42) # => [node]

=== Find all

For example, let say you want to find all instance of class FooBar


      fb1 = FooBar.new
      fb2 = FooBar.new
      
      all = FooBar.all  # => [fb1, fb2]

Neo4j.rb will automatically manage relationships between instances and classes in a MetaNode.
Each class that includes the Neo::Node mixin has a class instance variable to this MetaNode.
This MetaNode is used by the 'all' method to find all the instance of a certain ruby class.

This also works for inheritance, example

     class Foo
        include Neo::Node
     end 

     class Bar < Foo
     end

     f = Foo.new
     b = Bar.new

     Foo.all # => [f,b]
     Bar.all # => [b]


== Implementation details

=== MetaNodes

The Node mixin defines the ruby hook methods 'included' and 'inherited' which will be
called when someone includes the Neo::Node mixin or creates a subclass from a 
class that includes that mixin.

When the included or inherited methods are called it will create a
MetaNode that has a relationship to its instances.
When an instance is created, which includes the Neo::Node mixin, it
will add a relationship between the new node and its meta node. All
this logic is handled in the initialize method (initialize is like a
constructor in Java) which the Neo::Node mixin provides.
The initialize method will also update ancestors MetaNodes, so that
the referenses for ancestor classes and the new node will work as you
would expect.

=== Unmarshalling

The neo module will automatically unmarshalling nodes to the correct ruby class.
It does this by reading the classname property and loading that ruby class with that node.

  class Foo 
    include Neo::Node

    def hello
    end
  end

  f1 = Foo.new {}
  
  # load the class again
  f2 = Neo4j::Neo.instance.find_node(foo.neo_node_id)
  f2.hello
  # f2.class == Foo

