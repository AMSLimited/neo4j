= Neo4j

Neo4j is a graph database framework for JRuby.
 
It provides:
* Mapping of ruby objects to nodes in networks rather than in tables. 
* Storage of ruby object to a file system.
* Fast traversal of relationships between nodes in a hugh node space.
* Transaction with rollbacks support. 
* Indexing and quering of ruby objects.

Neo4j.rb consist of two modules: Neo4j and Lucene.
Neo4j depends on the Lucene module.

To make this possible it uses two powerful java libraries: 
* Neo4J (http://www.neo4j.org/) - for persistance and traversal of the graph
* Lucene (http://lucene.apache.org/java/docs/index.html) for quering and indexing.

== Installation

Neo4j exists as a gem at http://gems.github.com/list.html.
To install it please type:

   gem sources -a http://gems.github.com 
   sudo gem install andreasronge-neo4j

The gem sources command only needs to be executed once.

== The Lucene Module

You can use this module without using the Neo4j module. 

Example of how to write a document and find it:
(a document is like a record or row in a relation database).
  
    require 'lucene'

    include Lucene

    index = Index.new('var/myindex')  # store the index at dir: var/myindex

    # add one document (a document is like a record or row in a relation database)
    index << {:id=>'1', :name=>'foo'}

    # write to the index file
    index.commit

    # find a document with name foo
    # hits is a ruby Enumeration of documents
    hits = index.find('name' => 'foo') 

    # show the id of the first document (document 0) found
    # (the document contains all stored fields - see below)
    hits[0][:id]   # => '1'    

Notice that you have to call the commit method in order to update the index on the disk.
By performing several update and delete operations before a commit will be much
faster then performing commit after each operation. 

=== Id field

All Documents must have one id field. If one is not specified it is :id of type String.
A different id can be specified in the second parameter in the Index constructor.

  Index.new('some/path/to/the/index', :my_id)

To change the type of the my_id from String to a different type see below.

=== Conversion of types

Lucene.rb can handle type conversion for you. (The java lucene library stores all
the fields as Strings)
For example if you want the id field to be a fixnum

    require 'lucene'
    include Lucene

    index = Index.new('var/myindex')  # store the index at dir: var/myindex
    index.field_infos[:id][:type] = Fixnum    

    index << {:id=>1, :name=>'foo'} # notice 1 is not a string now

    index.commit

    # find that document, hits is a ruby Enumeration of documents
    hits = index.find(:name => 'foo') 

    # show the id of the first document (document 0) found
    # (the document contains all stored fields - see below)
    doc[0][:id]   # => 1     

If the field_info type parameter is not set then it has a default value of String.

=== Storage of fields
By default only the id field will be stored.
That means that in the example above the :name field will not be included in the document.

Example
    doc = index.find('name' => 'foo') 
    doc[:id]   # => 1     
    doc[:name] # => nil

Use the field info :store=true if you want a field to be stored in the index
(otherwise it will only be searchable).

Example

    require 'lucene'
    include Lucene

    index = Index.new('var/myindex')  # store the index at dir: var/myindex
    index.field_infos[:id][:type] = Fixnum    
    index.field_infos[:name][:store] = true # store this field

    index << {:id=>1, :name=>'foo'} # notice 1 is not a string now

    index.commit

    # find that document, hits is a ruby Enumeration of documents
    hits = index.find('name' => 'foo') 

    # let say hits only contains one document so we can use doc[0] for that one
    # that document contains all stored fields (see below)
    doc[0][:id]   # => 1     
    doc[0][:name] # => 'foo'

=== Setting field infos

As shown above you can set field infos like this

  index.field_infos[:id][:type] = Fixnum    

Or you can set several properties like this:

  index.field_infos[:id] = {:type => Fixnum, :store => true}    


=== Simple Queries

Lucene.rb support search in several fields:
Example

    # finds all document having both name 'foo' and age 42
    hits = index.find('name' => 'foo', :age=>42)  

Range queries

    # finds all document having both name 'foo' and age between 3 and 30
    hits = index.find('name' => 'foo', :age=>3..30)  

=== Advanced Queries (DSL)

The queries above can also be written in a lucene.rb DSL:

    hits = index.find { (name == 'andreas') & (foo == 'bar')}

Expression with OR (|) is supported, example

   # find all documents with name 'andreas' or age between 30 and 40
    hits = index.find { (name == 'andreas') | (age == 30..40)}

=== Thread-safety

The Lucene::Index is thread safe.
It guarantees that an index is not updated from two thread at the same time.


=== Lucene Transactions

Use the Lucene::Transaction in order to do atomic commits.
By using a transaction you do not need to call the Index.commit method.

Example:

    Transaction.run do |t|
      index = Index.new('var/index/foo')        
      index << { id=>42, :name=>'andreas'}
      t.failure  # rollback
    end  
    
    result = index.find('name' => 'andreas')
    result.size.should == 0

You can find which documents are uncommited by using the uncommited index property.

Example

      index = Index.new('var/index/foo')        
      index.uncommited #=> [document1, document2] 

Notice that even if it looks like a new Index instance object was created the index.uncommited
may return an not empty array. This is because Index.new is a singleton - a new instance object is not created.

== The Neo4j Module

=== Neo4j::Node

Neo4j::Node is a mixin that lets instances to be stored as a node in the neo node space on disk.
A node can have properties and relationships to other nodes.

Example of how declare a class that has this behaviour:

  class MyNode 
     include Neo4j::Node
   end


=== Create a Node

If a block is provided then the creation of the instance will be performed in an
transaction, see below for more information on transactions.

  node = MyNode.new { }

=== Delete a Node

The Neo4j::Node mixin defines a delete method that will delete the node and all its relationships.

Example:

  node = MyNode.new
  node.delete

The node in the example above will be removed from the neo database on the filesystem and the lucene index

=== Node Properties

You can set any properties, see example below.
Those properties will be stored on in the Neo database.

  # create a node with two properties in one transaction
  node = MyNode.new { |n|
     n.foo = 123  
     n.bar = 3.14
  }
 
  # access those properties
  puts node.foo
  

You can also set a property like this:

    f = SomeNode.new
    f.foo = 123

Neo4j.rb supports properties to by of type String, Fixnum, Float and Boolean.

=== Relationship

Relationships has to be declared by using the 'relations' class method.
For example, let say that Person can have a relationship to other nodes with the type 'friends':

  class Person 
     include Neo::Node
     relations :friends  # will generate a friends method
  end

Example how to add a relation to another node:

  f = Person.new 
  f.friends << SomeOtherNode.new
  

=== Properties on a relationship

A relationship can have properties just like a node. 

Example:

  p1 = Person.new
  p2 = Person.new

  relation = p1.friends.new(p2)

  # set a property 'since' on this relationship bewteen p1 and p2
  relation.since = 1992

=== Traversing relationships:

Each type of relationship has a method that returns an Enumerable object that enables you
to traverse that type of relationship. 

For example the Person example above declares one relationship of type friends.
You can traverse all Person's friend by doing:

  f.friends.each { |n| puts n }

(TODO this just goes one level deep in the graph, we should support of any level of traversal)



=== Finding Relationships

Given we have the two nodes with a relationship between them:

  n1 = Person.new
  n2 = Person.new
  
  n1.friends << n2

Then we can find all incoming and outgoing relationships like this:

  n1.relations.to_a # => [#<Neo4j::Relation:0x134ae32]

A Neo4j::Relation object represents a relationship between two nodes.

  n1.relations[0].start_node # => n1
  n1.relations[0].end_node # => n2

(TODO  relationship can have properties just like a node can)

=== Finding outgoing and incoming relationships

If we are only interested in all incoming nodes, we can do 

  n2.relations.incoming # => [#<Neo4j::Relation:0x134ae32]

Or outgoing:

  n1.relations.outgoing # => [#<Neo4j::Relation:0x134aea2]


=== Finding nodes in a relationship

If you do not want those relationship object but instead want the nodes you can use the 'nodes' method
in the Neo4j::Relation object.

For example:

  n2.relations.incoming.nodes # => [n1]


=== Transactions

All operations that work with the node space (even read operations) must be wrapped in a transaction.
Luckly neo4j.rb will automatically create a transaction for those operation that needs it if one is not already provided.

For example all get, set and find operations will start a new transaction if none is already not runnig (for that thread).

If you want to perfrom a set of operation in a single transaction, use the Neo4j::Transaction.run method:

Example

  Neo4j::Transaction.run {
    node1.foo = "value"
    node2.bar = "hi"
  }


==== Transactions and JTA

TODO, will soon support two phase commit transactions, (using Java JTA api)


==== Rollback

Neo4j support rollbacks on transaction. Example:
Example:

  include 'neo4j'

  node = MyNode.new

  Neo4j::Transaction.run { |t|
     node.foo = "hej"
     # something failed so we signal for a failure 
     t.failure # will cause a rollback, node.foo will not be updated
  }


You can also run it without a block, like this:

   transaction = Neo4j::Transaction.new
   transaction.start
   # do something
   transaction.finish

=== Indexing

If you want you can also declare properties to be indexed.
Use the properties class method, example:

  class SomeNode
     include Neo4j::Node
     properties :foo, :bar
  end


(TODO change name of properties to index ?)

=== Quering (using lucene)

All declared properties are automatically indexed by lucene.

Example

      class Person 
        include Neo4j::Node
        properties :name, :age
      end
    
      node = Person.new
      node.name = 'foo'
      node.age  = 42


      Person.find(:name => 'foo', :age => 42) # => [node]

The query parameter (like properties on a Neo4j::Node) can be of type String, Fixnum, Float, boolean or Range.
For more information read about the lucene module above.

=== Unmarshalling

The neo module will automatically unmarshalling nodes to the correct ruby class.
It does this by reading the classname property and loading that ruby class with that node.

  class Person 
    include Neo::Node

    def hello
    end
  end

  f1 = Person.new {}
  
  # load the class again
  f2 = Neo4j::Neo.instance.find_node(foo.neo_node_id)
  
  # f2 will now be new instance of Person, but will be == f1
  f1 == f2 # => true

  
