= Neo4j.rb

Neo4j.rb is a network database framework for JRuby.
 
It provides:
* Mapping of ruby objects to nodes in networks rather than in tables. 
* Storage of ruby object to a file system.
* Fast traversal of relationships between nodes in a hugh node space.
* Transaction with rollbacks support. 
* Indexing and quering of ruby objects.

To make this possible it uses two powerful java libraries: 
* Neo4J (http://www.neo4j.org/) - for persistance and traversal of the graph
* Lucene (http://lucene.apache.org/java/docs/index.html) for quering and indexing.

=== Neo4j::Node

Neo4j::Node is a mixin that lets instances to be stored as a node in the neo node space on disk.
A node can have properties and relationships to other nodes.

Example of how declare a class that has this behaviour:

  class MyNode 
     include Neo4j::Node
   end


=== Create a Node

If a block is provided then the creation of the instance will be performed in an
transaction, see below for more information on transactions.

  node = MyNode.new { }

=== Delete a Node

The Neo4j::Node mixin defines a delete method that will delete the node and all its relationships.

Example:

  node = MyNode.new
  node.delete

The node in the example above will be removed from the neo database on the filesystem and the lucene index

=== Node Properties

You can set any properties, see example below.
Those properties will be stored on in the Neo database.

  # create a node with two properties in one transaction
  node = MyNode.new { |n|
     n.foo = 123  
     n.bar = 3.14
  }
 
  # access those properties
  puts node.foo
  

You can also set a property like this:

    f = SomeNode.new
    f.foo = 123

Neo4j.rb supports properties to by of type String, Fixnum, Float and Boolean.

=== Relationship

Relationships has to be declared by using the 'relations' class method.
For example, let say that Person can have a relationship to other nodes with the type 'friends':

  class Person 
     include Neo::Node
     relations :friends  # will generate a friends method
  end

Example how to add a relation to another node:

  f = Person.new 
  f.friends << SomeOtherNode.new
  

=== Traversing relationships:

Each type of relationship has a method that returns an Enumerable object that enables you
to traverse that type of relationship. 

For example the Person example above declares one relationship of type friends.
You can traverse all Person's friend by doing:

  f.friends.each { |n| puts n }

(TODO this just goes one level deep in the graph, we should support of any level of traversal)



=== Finding Relationships

Given we have the two nodes with a relationship between them:

  n1 = Person.new
  n2 = Person.new
  
  n1.friends << n2

Then we can find all incoming and outgoing relationships like this:

  n1.relations.to_a # => [#<Neo4j::Relation:0x134ae32]

A Neo4j::Relation object represents a relationship between two nodes.

  n1.relations[0].start_node # => n1
  n1.relations[0].end_node # => n2

(TODO  relationship can have properties just like a node can)

=== Finding outgoing and incoming relationships

If we are only interested in all incoming nodes, we can do 

  n2.relations.incoming # => [#<Neo4j::Relation:0x134ae32]

Or outgoing:

  n1.relations.outgoing # => [#<Neo4j::Relation:0x134aea2]


=== Finding nodes in a relationship

If you do not want those relationship object but instead want the nodes you can use the 'nodes' method
in the Neo4j::Relation object.

For example:

  n2.relations.incoming.nodes # => [n1]


=== Transactions

All operations that work with the node space (even read operations) must be wrapped in a transaction.
Luckly neo4j.rb will automatically create a transaction for those operation that needs it if one is not already provided.

For example all get, set and find operations will start a new transaction if none is already not runnig (for that thread).

If you want to perfrom a set of operation in a single transaction, use the Neo4j::Transaction.run method:

Example

  Neo4j::Transaction.run {
    node1.foo = "value"
    node2.bar = "hi"
  }


==== Transactions and JTA

TODO, will soon support two phase commit transactions, (using Java JTA api)


==== Rollback

Neo4j support rollbacks on transaction. Example:
Example:

  include 'neo4j'

  node = MyNode.new

  Neo4j::Transaction.run { |t|
     node.foo = "hej"
     # something failed so we signal for a failure 
     t.failure # will cause a rollback, node.foo will not be updated
  }


You can also run it without a block, like this:

   transaction = Neo4j::Transaction.new
   transaction.start
   # do something
   transaction.finish

=== Indexing

If you want you can also declare those properties, like the attr_accessor

  class SomeNode
     include Neo4j::Node
     properties :foo, :bar
  end


(TODO change name of properties to index ?)

=== Quering (using lucene)

All declared properties are automatically indexed by lucene.

Example

      class Person 
        include Neo4j::Node
        properties :name, :age
      end
    
      node = Person.new
      node.name = 'foo'
      node.age  = 42


      Person.find(:name => 'foo', :age => 42) # => [node]

The query parameter (like properties on a Neo4j::Node) can be of type String, Fixnum, Float and boolean.

== Implementation details

=== Unmarshalling

The neo module will automatically unmarshalling nodes to the correct ruby class.
It does this by reading the classname property and loading that ruby class with that node.

  class Person 
    include Neo::Node

    def hello
    end
  end

  f1 = Person.new {}
  
  # load the class again
  f2 = Neo4j::Neo.instance.find_node(foo.neo_node_id)
  
  # f2 will now be new instance of Person, but will be == f1
  f1 == f2 # => true

  
== TODO  

Support for query relationships.
Let say we want to find all employees in a company who are of age 42:

  class Company
    relation :employees, Person
  end

  c.employees(:age => 42)

=== Implementation plan

The index (lucene documents) will look something like this
Person       Company
id           id
age          name
company_id   person_id, person_id
company_id   

when company.employees << n
add index on Company
employees_id
add index on Person
company_id

when person.company << c
add index on Person, company_id

how to search: c.employees(:age => 42)
1. find the id of c
2. find in Person company_id = id, age = 42


